/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javaassignmentq3server;

import java.io.*;
import java.net.*;
import java.text.DecimalFormat;
import javax.swing.JTextArea;


/**
 *
 * @author Bernard Heyns DV2013-0499
 */
public class serverInterface extends javax.swing.JFrame {

    /**
     * Creates new form serverInterface
     */
    public serverInterface() {
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
   
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        serverStartBut = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outputArea.setEditable(false);
        outputArea.setColumns(20);
        outputArea.setRows(5);
        outputArea.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                outputAreaMouseMoved(evt);
            }
        });
        outputArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outputAreaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(outputArea);

        serverStartBut.setText("Start Server");
        serverStartBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverStartButActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(serverStartBut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(serverStartBut, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void outputAreaMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputAreaMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_outputAreaMouseMoved

    private void outputAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputAreaMouseClicked
        
    }//GEN-LAST:event_outputAreaMouseClicked

    private void serverStartButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverStartButActionPerformed
        connect();
    }//GEN-LAST:event_serverStartButActionPerformed

    /**
     * @param args the command line arguments
     */
    int clientNumbers = 0;
    ServerSocket serverSocket;
   
 //Create the BMI calculate method which takes 2 doubles as parameters
 public double bmi(double weight,double height){
     //Do the calculation and assign to bmiCalc
       double bmiCalc = weight/(height * height);
       //Return the answer
       return bmiCalc;
    }
 //Create the Loan calculate method which takes 3 doubles as parameters
   public double loan(double loanAmount,double intRate,double repayYears){
       //Calculate the interest rate
       double newint = intRate/100;
       //Do the loan calculation
       double loanCalc = loanAmount +(loanAmount * newint * repayYears);
       //Return the answer
       return loanCalc;
   }
   //Create the connect method
    public void connect(){
        try{
            //Number of maximum clients set
        int qLenght = 12;
        //Reset the client numbers
        int clientNum = 0;
                //Create a serversocket with port 8090 and lenght of 12 
     serverSocket = new ServerSocket(8090, qLenght);
      //While loop which will continue until the break statement occurs
        while(true){
            //Create a new socket for each client and accept it
            Socket sock = serverSocket.accept();
            //Increment the clientNum
            clientNum++;
            //Call the connectClient class that will send the socket
            ConnectClient hClient = new ConnectClient(sock);
            //Create a new thread 
            Thread tr = new Thread(hClient);
            //Start the thread
             tr.start();
             //Break the loop of clients reaches 12 
            if(clientNum ==12){
             break;
            }
        }
        
       //Catch any errors
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton serverStartBut;
    // End of variables declaration//GEN-END:variables
    //Create a class that implements Runnable for threads 
    class ConnectClient implements Runnable{
        //Create a new instance of Socket
    Socket socket = new Socket();
      String line=null;
  //  BufferedReader  is = null;
   // PrintWriter os=null;
   // Socket s=null;
      //Declare DataInput and output streams to send data to and from the server
    DataInputStream fromClient;
         DataOutputStream toClient;
    //Constructor that recieves a Socket and sets it as the class's socket
    public ConnectClient(Socket socks){
        this.socket=socks;
        
    }
  
    @Override
    //Implement the run() abstract method 
    public void run(){
        try{
      //Instantiate the stream IO readers
        fromClient = new DataInputStream(socket.getInputStream());
            toClient = new DataOutputStream(socket.getOutputStream());
     //   is = new BufferedReader(new InputStreamReader(socket.getInputStream()));
     //Increment clientNumbers as each client connects
        clientNumbers++;
        String nextLine;
 
            String str ;
            //Get which type of calculation should be done
            String resp = fromClient.readUTF();
     //If the UTF is equal to Loan then do logic
         if(resp.equals("Loan")){
             //Set the values from the client
              double amount   = fromClient.readDouble();
                  double interest   = fromClient.readDouble();
                  double years  = fromClient.readDouble();
                  //Write to client the type of calculation
                    toClient.writeUTF("Loan");
                    //Write the client numbers to the stream
                     toClient.writeInt(clientNumbers);
                     //Send the values to the client
                    toClient.writeDouble(loan(amount,interest,years));
                    //Create the string which would display in the server interface
                    str = ("Client number"+clientNumbers +" Sent these values , Total Sum = " + amount + " and Interest Rate = "+ interest + " to be paid in "+years+" years");
                    System.out.println("here:"+ str);
                    //Set the text on the text area in the server interface
                    outputArea.append(str);
                    
         }else {
                     //Set the values from the client
                     double weight = fromClient.readDouble();
                    double height = fromClient.readDouble();
                    double otherAmount = fromClient.readDouble();
                    //Write to client the type of calculation
                     toClient.writeUTF("BMI");
                     //Write the client numbers to the stream
                     toClient.writeInt(clientNumbers);
                     //Create the string which would display in the server interface
                    toClient.writeDouble(bmi(weight,height));
                    //Create the string which would display in the server interface
                  str = ("Client number"+clientNumbers +" Sent these values , Height:" + height + " and Weight "+ weight);
                     System.out.println(str);
                      //Set the text on the text area in the server interface
                       outputArea.append(str);
         }
           
            
           
        }catch(IOException ioe){
            ioe.printStackTrace();
        }
        

    }
}

}

